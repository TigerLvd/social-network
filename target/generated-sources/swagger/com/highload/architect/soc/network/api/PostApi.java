/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.highload.architect.soc.network.api;

import java.math.BigDecimal;
import com.highload.architect.soc.network.model.LoginPost500Response;
import com.highload.architect.soc.network.model.Post;
import com.highload.architect.soc.network.model.PostCreatePostRequest;
import com.highload.architect.soc.network.model.PostUpdatePutRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-25T10:15:19.882431+05:00[Asia/Yekaterinburg]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "post", description = "the post API")
public interface PostApi {

    /**
     * POST /post/create
     *
     * @param postCreatePostRequest  (optional)
     * @return Успешно создан пост (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @Operation(
        operationId = "postCreatePost",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешно создан пост", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные данные ввода"),
            @ApiResponse(responseCode = "401", description = "Неавторизованный доступ"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
            }),
            @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/post/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<String> postCreatePost(
        @Parameter(name = "PostCreatePostRequest", description = "") @Valid @RequestBody(required = false) PostCreatePostRequest postCreatePostRequest
    );


    /**
     * PUT /post/delete/{id}
     *
     * @param id  (required)
     * @return Успешно удален пост (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @Operation(
        operationId = "postDeleteIdPut",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешно удален пост"),
            @ApiResponse(responseCode = "400", description = "Невалидные данные ввода"),
            @ApiResponse(responseCode = "401", description = "Неавторизованный доступ"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
            }),
            @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/post/delete/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> postDeleteIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /post/feed
     *
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @return Успешно получены посты друзей (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @Operation(
        operationId = "postFeedGet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешно получены посты друзей", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Post.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные данные ввода"),
            @ApiResponse(responseCode = "401", description = "Неавторизованный доступ"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
            }),
            @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/post/feed",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Post>> postFeedGet(
        @DecimalMin("0") @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") BigDecimal offset,
        @DecimalMin("1") @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") BigDecimal limit
    );


    /**
     * GET /post/get/{id}
     *
     * @param id  (required)
     * @return Успешно получен пост (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @Operation(
        operationId = "postGetIdGet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешно получен пост", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Post.class))
            }),
            @ApiResponse(responseCode = "400", description = "Невалидные данные ввода"),
            @ApiResponse(responseCode = "401", description = "Неавторизованный доступ"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
            }),
            @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/post/get/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Post> postGetIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * PUT /post/update
     *
     * @param postUpdatePutRequest  (optional)
     * @return Успешно изменен пост (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @Operation(
        operationId = "postUpdatePut",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешно изменен пост"),
            @ApiResponse(responseCode = "400", description = "Невалидные данные ввода"),
            @ApiResponse(responseCode = "401", description = "Неавторизованный доступ"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
            }),
            @ApiResponse(responseCode = "503", description = "Ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost500Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/post/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> postUpdatePut(
        @Parameter(name = "PostUpdatePutRequest", description = "") @Valid @RequestBody(required = false) PostUpdatePutRequest postUpdatePutRequest
    );

}
